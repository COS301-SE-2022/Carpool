// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

////////////////////////////////
//1.User
////////////////////////////////

model User {
    id            String @id @default(cuid())
    name          String
    surname       String
    email         String @unique
    password      String
    university    String
    studentNumber String @unique @map("student_number")
    profilePic    String @map("profile_pic") @default("placeholder.png")
    isDriver      Boolean @default(false)
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @default(now()) @map("updated_at")
    isValidated   Boolean @default(false)
    cellNumber    String @map("cell_number")
    avgRating     Float @default(0)

    byReviews     Review[] @relation("by_review")
    forReviews    Review[] @relation("for_review")
    bankDetails   BankingDetails? @relation("bank_details")
    tripsCreated  Trip[]
    driver        Driver? @relation("driver_id")
    bookings      Booking[]

    sender        Message[] @relation("sender")
    receiver      Message[] @relation("receiver")
    @@map("user")
}

model AdminUser {
  id        String @id @default(cuid())
  name      String
  surname   String
  email     String @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  @@map("admin_user")
}

////////////////////////////////
//2.Banking Details
////////////////////////////////

model BankingDetails {
    userId      String @map("user_id") @unique
    bankAccount Int @unique @id @map("bank_account")
    expireDate  DateTime @map("expire_date")
    branch      String
    bank        String
    user        User @relation(name:"bank_details", fields:[userId], references: [id])

    @@map("banking_details")
}

////////////////////////////////
//3.Trips
////////////////////////////////

model Trip {
    tripId          String @id @default(cuid()) @map("trip_id")
    driverId        String @map("driver_id")
    tripDate        DateTime @map("trip_date")
    createdAt       DateTime @default(now()) @map("created_at")
    seatsAvailable  Int @map("seats_available")
    price           Float
    // startLocation String @map("start_location")
    // destination String
    // category    String
    status          String @default("confirmed")

    driver          User @relation(fields:[driverId], references: [id])
    passengers      Booking[]
    // start         Location @relation("start_location")
    // destination   Location @relation("destination")
    coordinates     Location[]
    reviews         Review[]
    reviewed        Boolean @default(false)

    @@map("trip")
}

model Booking {
  bookingId      String @id @default(cuid()) @map("booking_id")
  userId         String @map("user_id")
  tripId         String @map("trip_id")
  bookingDate    DateTime @map("booking_date") @default(now())
  seatsBooked    Int @map("seats_booked")
  status         String @default("requested")
  price          Float
  reviewed       Boolean @default(false)

  pickUp         PickupLocation[] @relation("pickup_location")
  user           User @relation(fields:[userId], references: [id])
  trip           Trip @relation(fields:[tripId], references: [tripId])
}

model PickupLocation {
  id        String @id @default(cuid())
  address   String
  latitude  String
  longitude String
  bookingId    String @map("booking_id") @unique

  booking     Booking? @relation(name: "pickup_location", fields:[bookingId], references: [bookingId])

  @@map("pickup_location")
}

model Location {
  id        String @id @default(cuid())
  address   String
  latitude  String
  longitude String
  tripId    String @map("trip_id")

  trip     Trip @relation(fields:[tripId], references: [tripId])

  @@map("location")
}


////////////////////////////////
//4.Reviews
////////////////////////////////

model Review {
    id          String @id @default(cuid())
    byId        String
    forId       String
    tripId      String @map("trip_id")
    role        String
    comment     String
    rating      Int

    byUser      User @relation(name:"by_review", fields:[byId], references: [id])
    forUser     User @relation(name:"for_review", fields:[forId], references: [id])
    trip        Trip @relation(fields:[tripId], references: [tripId])
}

////////////////////////////////
//5. Driver
////////////////////////////////

model Driver {
    userId      String @id @map("user_id")
    idNumber    String @unique @map("id_number")
    license     String
    licensePlate String @map("license_plate")
    model       String
    carPicture  String @map("car_picture")
    user      User @relation(name: "driver_id", fields: [userId], references: [id])

    @@map("driver")
}

//Roles for Reviews


model Message {
  id        String @id @default(cuid())
  message   String
  senderId  String @map("sender_id")
  receiverId String @map("receiver_id")
  createdAt DateTime @default(now()) @map("created_at")

  sender    User @relation(name: "sender", fields: [senderId], references: [id])
  receiver  User @relation(name: "receiver", fields: [receiverId], references: [id])
}
